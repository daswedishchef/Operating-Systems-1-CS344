#!/bin/bash
echo $0
valid2=0
var=0
var2=0
case $# in
    0)
        echo "Please enter matrix [operation] [m1] [m2]" >&2
        exit 2;;
    1)
        echo "Please include matrix" >&2
        cat > "$var"
        exit 2;;
    2)
        if [[ -r $2 && -s $2 ]]
        then
            var="/nfs/stak/users/carlsosp/os1/prog1/$2"
            echo "---- Result ----"
        else
            echo "Enter valid matrix" >&2
            exit 1
        fi;;
    3)
        if [[ -r $2 && -s $2 ]]
        then
            if [[ -r $3 && -s $3 ]]
            then
                valid2=1
                var="/nfs/stak/users/carlsosp/os1/prog1/$2"
                var2="/nfs/stak/users/carlsosp/os1/prog1/$3"
                echo "---- Result ----"
            else
                echo "Error reading second matrix" >&2
                exit 1
            fi
        else
            echo "Error reading first matrix" >&2
            exit 1
        fi;;
    \?)
        ;;
esac
case $1 in
    dims)
        printf "Rows: "
        echo | wc -l < "$var"
        printf "Columns: "
        read -a arr < "$var"
        echo "${#arr[@]}"
        exit 0;;
    transpose)
        #cut -f1 $var > read -a arr3
        #echo ${arr3[@]}
        rows=0
        i=0
        declare -a output=()
        while read -a arr2 ;
        do
            for ((j=0; j<${#arr2[@]}; j++))
            do
                output[$i]=${arr2[$j]}
                ((i+=1))
            done
            ((rows+=1))
        done < "$var"
        read -a top < "$var"
        cols=${#top[@]}
        rows=0
        for ((i=0; i<$cols; i++))
        do
            for ((j=i; j<${#output[@]}; j+=cols))
            do
                printf "%s"${output[j]}
                printf "	"
            done
            printf "\n"
        done
        ;;
    mean)
        echo "mean option"
        ;;
    add)
        if [ $valid2 -ne 1 ]
        then
            echo "two valid matrices required" >&2
            exit 1
        fi
        echo "add option"
        ;;
    multiply)
        if [ $valid2 -ne 1 ]
        then
            echo "two valid matrices required" >&2
            exit 1
        fi
        echo "mult option"
        ;;
    \?) 
        echo "enter: dims, transpose, mean, add, or multiply" >&2
        exit 2
esac

#transpose function
#reflects matrix along main diagonal
#function trans()

##mean function
#creates 1xn matrix with average of each column
#function mean()

#add function
#adds matrices and throws err if dims!=
#function add()

#mulitply function
#multiplies 2 matrices
#function mult()

